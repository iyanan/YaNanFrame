/**
 * RTDT js框架
 * 必须添加配置RTDTConf
 * 调用方法
 * *************普通请求
 * RTDT.Req({
 *				action: "testActiond",
 *				parameters:"n%E5%BE%97%E5%88%B0me=%E5%97%AF%E5%97%AF&age=&sex=&other=",
 *				success:function(data){
 *					console.log("get data:"+data)
 *				},error:function(err){
 *					console.log("error:"+err.data)
 *				}
 *			})
 * 参数说明
 * action:调用的action地址
 * parameters:序列化的表单数据
 * success:当正常返回数据
 * error:当错误发生（可能服务器返回错误信息，或者js内部错误）
 * 
 * *************notify绑定
 * RTDT.Bind({
 *				action:"NotifyBind",
 * 				parameters:null,
 *				bind:function(data){
 *					$("body").append("绑定成功："+data+"<br/>");
 *				},
 *				notify:function(data){
 *					$("body").append("得到广播："+data+"<br/>");
 *				},error:function(err){
 *				$("body").append("出现错误："+err.status+"<br/>");
 *					console.log(err)
 *				}
 *			})
 * 参数说明
 * action:调用的Notify action地址
 * parameters:序列化的表单数据
 * bind:当消息推广绑定以后
 * notify:当服务器推送消息
 * error:当错误发生（可能服务器返回错误信息，或者js内部错误）
 * 需要其中依赖jquery的extends函数，需要jquery支持
 * 
 * version: v1.0 支持普通请求处理
 * version: v1.2 支持广播接口绑定
 * protocol；RTDT 1.0
 * by:YaNan 2017-2018
 */
/**
 * Req数据交互参数
 */
var reqAction = {
			action: null,
			namespace: null,
			parameters: null,
			success:null,
			error:null
			}
/**
 * Notify 数据参数
 */
var NotifyConfig = {
	action:null,
	namespace:null,
	bind:null,
	notify:null,
	error:null
}
var reqMap = {};
var timeoutTimers = {};
var actionTimers = {};
var webSocket;
var RTDT=RTDT || {};
function guid() {
    function S4() {
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    }
    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}
RTDT = function(){
	this.available=false;
	/**
	 * req数据交互请求
	 */
	this.Req = function(params){
		params = $.extend(true, reqAction,params);
		var REQAction = {
			action:params.action,
			namespace:params.namespace,
			parameters:params.parameters,
			AUID:guid()
		}
		reqMap[REQAction.AUID]=params;
		timeoutTimers[REQAction.AUID] = setTimeout(function(){
			console.log("timeout");
			clearInterval(actionTimers[REQAction.AUID]);
		},RTDTConf.timeout)
		actionTimers[REQAction.AUID] = setInterval(function(){
			if(RTDT.available){
				clearInterval(actionTimers[REQAction.AUID]);
				webSocket.send(JSON.stringify(REQAction));
			}
		},RTDTConf.refresh);
		
	}
	/**
	 * notify广播机制
	 */
	this.Bind=function(params){
		params = $.extend(true, NotifyConfig,params);
		var REQAction = {
			action:params.action,
			namespace:params.namespace,
			parameters:params.parameters,
			AUID:guid()
		}
		reqMap[REQAction.AUID]=params;
		timeoutTimers[REQAction.AUID] = setTimeout(function(){
			console.log("timeout");
			clearInterval(actionTimers[REQAction.AUID]);
		},RTDTConf.timeout)
		actionTimers[REQAction.AUID] = setInterval(function(){
			if(RTDT.available){
				clearInterval(actionTimers[REQAction.AUID]);
				webSocket.send(JSON.stringify(REQAction));
			}
		},RTDTConf.refresh);
	}
	this.isAvailable = function(){
		return this.available;
	}
	this.OnResponse=function(data){
		console.log("======================================")
		console.log(data)
		try{//需要捕获异常
			data = eval("("+data.data+")");
			if(data.AUID==null||data.AUID==undefined)
				throw new Error("protocol error");
			clearTimeout(timeoutTimers[data.AUID]);
			console.log(reqMap[data.AUID])
			//判断为请求还是绑定
			if(data.status==null||data.status==undefined||data.type==null||data.type==undefined)
				throw new Error("protocol error")
			if(data.type==4281){
				if(data.status==4270){
					if(typeof reqMap[data.AUID].bind=="function")
						reqMap[data.AUID].bind.call(this,data.data);
					console.log("bind success:"+data.data);
				}else if(data.status==4280){
					if(typeof reqMap[data.AUID].notify=="function")
						reqMap[data.AUID].notify.call(this,data.data);
					console.log("get notify:"+data.data)
				}else{
					if(typeof reqMap[data.AUID].error=="function")
						reqMap[data.AUID].error.call(this,data);
					console.log("error code:"+data.status)
				}
			}else if(data.status==4280){
				if(typeof reqMap[data.AUID].success=="function")
					reqMap[data.AUID].success.call(this,data.data);
				console.log("get data:"+data.data)
			}else{
				RTDT.OnError(data.AUID,data)
			}
				
		}catch(err){
			console.log(err);
			if(typeof RTDTConf.error == "function"){
				RTDTConf.error.call(this,err)
			}
		}
	}
	this.OnError = function(AUID,err){
		if(typeof reqMap[AUID].error=="function")
				reqMap[AUID].error.call(this,err);
	}
};
(function(){
	/**
	 * 检查socket 配置文件是否存在
	 * @param {Object} event
	 */
	RTDT = new RTDT();
	if(typeof RTDTConf == "undefined")
		throw new Error("RTDT need RTDT Conf")
	webSocket =	new WebSocket(RTDTConf.url);
		webSocket.onerror = function(event) {
			RTDT.OnError(event);
		};
		webSocket.onopen = function(event) {
			RTDT.available=true;
		};
		webSocket.onmessage = function(event) {
			RTDT.OnResponse(event)
		};
	
})();
